// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/java/rs/pax/paxintellijplugin/Pax.flex

package rs.pax.paxintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static rs.pax.paxintellijplugin.psi.PaxTypes.*;


public class PaxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\0"+
    "\1\24\1\25\1\26\1\27\1\30\32\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\41\1\46\2\41\1\47\1\41"+
    "\1\50\1\51\2\41\1\52\1\53\1\54\1\55\2\41"+
    "\1\56\2\41\1\57\1\60\1\61\7\0\1\3\32\0"+
    "\1\1\11\0\1\62\12\0\1\62\4\0\1\62\5\0"+
    "\27\62\1\0\37\62\1\0\u01ca\62\4\0\14\62\16\0"+
    "\5\62\7\0\1\62\1\0\1\62\201\0\5\62\1\0"+
    "\2\62\2\0\4\62\1\0\1\62\6\0\1\62\1\0"+
    "\3\62\1\0\1\62\1\0\24\62\1\0\123\62\1\0"+
    "\213\62\10\0\246\62\1\0\46\62\2\0\1\62\6\0"+
    "\51\62\107\0\33\62\4\0\4\62\55\0\53\62\43\0"+
    "\2\62\1\0\143\62\1\0\1\62\17\0\2\62\7\0"+
    "\2\62\12\0\3\62\2\0\1\62\20\0\1\62\1\0"+
    "\36\62\35\0\131\62\13\0\1\62\30\0\41\62\11\0"+
    "\2\62\4\0\1\62\5\0\26\62\4\0\1\62\11\0"+
    "\1\62\3\0\1\62\27\0\31\62\7\0\13\62\65\0"+
    "\25\62\1\0\10\62\106\0\66\62\3\0\1\62\22\0"+
    "\1\62\7\0\12\62\17\0\20\62\4\0\10\62\2\0"+
    "\2\62\2\0\26\62\1\0\7\62\1\0\1\62\3\0"+
    "\4\62\3\0\1\62\20\0\1\62\15\0\2\62\1\0"+
    "\3\62\16\0\2\62\12\0\1\62\10\0\6\62\4\0"+
    "\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0"+
    "\2\62\1\0\2\62\37\0\4\62\1\0\1\62\23\0"+
    "\3\62\20\0\11\62\1\0\3\62\1\0\26\62\1\0"+
    "\7\62\1\0\2\62\1\0\5\62\3\0\1\62\22\0"+
    "\1\62\17\0\2\62\27\0\1\62\13\0\10\62\2\0"+
    "\2\62\2\0\26\62\1\0\7\62\1\0\2\62\1\0"+
    "\5\62\3\0\1\62\36\0\2\62\1\0\3\62\17\0"+
    "\1\62\21\0\1\62\1\0\6\62\3\0\3\62\1\0"+
    "\4\62\3\0\2\62\1\0\1\62\1\0\2\62\3\0"+
    "\2\62\3\0\3\62\3\0\14\62\26\0\1\62\64\0"+
    "\10\62\1\0\3\62\1\0\27\62\1\0\20\62\3\0"+
    "\1\62\32\0\3\62\5\0\2\62\36\0\1\62\4\0"+
    "\10\62\1\0\3\62\1\0\27\62\1\0\12\62\1\0"+
    "\5\62\3\0\1\62\40\0\1\62\1\0\2\62\17\0"+
    "\2\62\22\0\10\62\1\0\3\62\1\0\51\62\2\0"+
    "\1\62\20\0\1\62\5\0\3\62\10\0\3\62\30\0"+
    "\6\62\5\0\22\62\3\0\30\62\1\0\11\62\1\0"+
    "\1\62\2\0\7\62\72\0\60\62\1\0\2\62\14\0"+
    "\7\62\72\0\2\62\1\0\1\62\1\0\5\62\1\0"+
    "\30\62\1\0\1\62\1\0\12\62\1\0\2\62\11\0"+
    "\1\62\2\0\5\62\1\0\1\62\25\0\4\62\40\0"+
    "\1\62\77\0\10\62\1\0\44\62\33\0\5\62\163\0"+
    "\53\62\24\0\1\62\20\0\6\62\4\0\4\62\3\0"+
    "\1\62\3\0\2\62\7\0\3\62\4\0\15\62\14\0"+
    "\1\62\21\0\46\62\1\0\1\62\5\0\1\62\2\0"+
    "\53\62\1\0\115\62\1\0\4\62\2\0\7\62\1\0"+
    "\1\62\1\0\4\62\2\0\51\62\1\0\4\62\2\0"+
    "\41\62\1\0\4\62\2\0\7\62\1\0\1\62\1\0"+
    "\4\62\2\0\17\62\1\0\71\62\1\0\4\62\2\0"+
    "\103\62\45\0\20\62\20\0\126\62\2\0\6\62\3\0"+
    "\u016c\62\2\0\21\62\1\1\32\62\5\0\113\62\6\0"+
    "\10\62\7\0\15\62\1\0\4\62\16\0\22\62\16\0"+
    "\22\62\16\0\15\62\1\0\3\62\17\0\64\62\43\0"+
    "\1\62\4\0\1\62\103\0\131\62\7\0\5\62\2\0"+
    "\42\62\1\0\1\62\5\0\106\62\12\0\37\62\61\0"+
    "\36\62\2\0\5\62\13\0\54\62\4\0\32\62\66\0"+
    "\27\62\11\0\65\62\122\0\1\62\135\0\57\62\21\0"+
    "\7\62\67\0\36\62\15\0\2\62\12\0\54\62\32\0"+
    "\44\62\51\0\3\62\12\0\44\62\2\0\11\62\7\0"+
    "\53\62\2\0\3\62\51\0\4\62\1\0\6\62\1\0"+
    "\2\62\3\0\1\62\5\0\300\62\100\0\26\62\2\0"+
    "\6\62\2\0\46\62\2\0\6\62\2\0\10\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\37\62\2\0"+
    "\65\62\1\0\7\62\1\0\1\62\3\0\3\62\1\0"+
    "\7\62\3\0\4\62\2\0\6\62\4\0\15\62\5\0"+
    "\3\62\1\0\7\62\3\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\21\0\1\62\15\0\1\62\20\0"+
    "\15\62\145\0\1\62\4\0\1\62\2\0\12\62\1\0"+
    "\1\62\3\0\5\62\6\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\4\62\1\0\13\62\2\0\4\62\5\0"+
    "\5\62\4\0\1\62\64\0\2\62\u017b\0\57\62\1\0"+
    "\57\62\1\0\205\62\6\0\4\62\3\0\2\62\14\0"+
    "\46\62\1\0\1\62\5\0\1\62\2\0\70\62\7\0"+
    "\1\62\20\0\27\62\11\0\7\62\1\0\7\62\1\0"+
    "\7\62\1\0\7\62\1\0\7\62\1\0\7\62\1\0"+
    "\7\62\1\0\7\62\120\0\1\62\320\0\1\1\4\0"+
    "\2\62\52\0\5\62\5\0\2\62\4\0\126\62\6\0"+
    "\3\62\1\0\132\62\1\0\4\62\5\0\53\62\1\0"+
    "\136\62\21\0\33\62\65\0\306\62\112\0\360\62\20\0"+
    "\215\62\103\0\56\62\2\0\15\62\3\0\20\62\12\0"+
    "\2\62\24\0\57\62\20\0\37\62\2\0\106\62\61\0"+
    "\11\62\2\0\147\62\2\0\65\62\2\0\5\62\60\0"+
    "\13\62\1\0\3\62\1\0\4\62\1\0\27\62\35\0"+
    "\64\62\16\0\62\62\76\0\6\62\3\0\1\62\1\0"+
    "\2\62\13\0\34\62\12\0\27\62\31\0\35\62\7\0"+
    "\57\62\34\0\1\62\20\0\5\62\1\0\12\62\12\0"+
    "\5\62\1\0\51\62\27\0\3\62\1\0\10\62\24\0"+
    "\27\62\3\0\1\62\3\0\62\62\1\0\1\62\3\0"+
    "\2\62\2\0\5\62\2\0\1\62\1\0\1\62\30\0"+
    "\3\62\2\0\13\62\7\0\3\62\14\0\6\62\2\0"+
    "\6\62\2\0\6\62\11\0\7\62\1\0\7\62\1\0"+
    "\53\62\1\0\14\62\10\0\163\62\35\0\244\62\14\0"+
    "\27\62\4\0\61\62\4\0\u0100\63\156\62\2\0\152\62"+
    "\46\0\7\62\14\0\5\62\5\0\1\62\1\0\12\62"+
    "\1\0\15\62\1\0\5\62\1\0\1\62\1\0\2\62"+
    "\1\0\2\62\1\0\154\62\41\0\153\62\22\0\100\62"+
    "\2\0\66\62\50\0\14\62\164\0\5\62\1\0\207\62"+
    "\44\0\32\62\6\0\32\62\13\0\131\62\3\0\6\62"+
    "\2\0\6\62\2\0\6\62\2\0\3\62\43\0\14\62"+
    "\1\0\32\62\1\0\23\62\1\0\2\62\1\0\17\62"+
    "\2\0\16\62\42\0\173\62\205\0\35\62\3\0\61\62"+
    "\57\0\40\62\15\0\24\62\1\0\10\62\6\0\46\62"+
    "\12\0\36\62\2\0\44\62\4\0\10\62\60\0\236\62"+
    "\22\0\44\62\4\0\44\62\4\0\50\62\10\0\64\62"+
    "\234\0\67\62\11\0\26\62\12\0\10\62\230\0\6\62"+
    "\2\0\1\62\1\0\54\62\1\0\2\62\3\0\1\62"+
    "\2\0\27\62\12\0\27\62\11\0\37\62\101\0\23\62"+
    "\1\0\2\62\12\0\26\62\12\0\32\62\106\0\70\62"+
    "\6\0\2\62\100\0\1\62\17\0\4\62\1\0\3\62"+
    "\1\0\35\62\52\0\35\62\3\0\35\62\43\0\10\62"+
    "\1\0\34\62\33\0\66\62\12\0\26\62\12\0\23\62"+
    "\15\0\22\62\156\0\111\62\67\0\63\62\15\0\63\62"+
    "\15\0\44\62\334\0\35\62\12\0\1\62\10\0\26\62"+
    "\232\0\27\62\14\0\65\62\113\0\55\62\40\0\31\62"+
    "\32\0\44\62\35\0\1\62\13\0\43\62\3\0\1\62"+
    "\14\0\60\62\16\0\4\62\25\0\1\62\1\0\1\62"+
    "\43\0\22\62\1\0\31\62\124\0\7\62\1\0\1\62"+
    "\1\0\4\62\1\0\17\62\1\0\12\62\7\0\57\62"+
    "\46\0\10\62\2\0\2\62\2\0\26\62\1\0\7\62"+
    "\1\0\2\62\1\0\5\62\3\0\1\62\22\0\1\62"+
    "\14\0\5\62\236\0\65\62\22\0\4\62\24\0\1\62"+
    "\40\0\60\62\24\0\2\62\1\0\1\62\270\0\57\62"+
    "\51\0\4\62\44\0\60\62\24\0\1\62\73\0\53\62"+
    "\15\0\1\62\107\0\33\62\345\0\54\62\164\0\100\62"+
    "\37\0\1\62\240\0\10\62\2\0\47\62\20\0\1\62"+
    "\1\0\1\62\34\0\1\62\12\0\50\62\7\0\1\62"+
    "\25\0\1\62\13\0\56\62\23\0\1\62\42\0\71\62"+
    "\7\0\11\62\1\0\45\62\21\0\1\62\61\0\36\62"+
    "\160\0\7\62\1\0\2\62\1\0\46\62\25\0\1\62"+
    "\31\0\6\62\1\0\2\62\1\0\40\62\16\0\1\62"+
    "\u0147\0\23\62\15\0\232\62\346\0\304\62\274\0\57\62"+
    "\321\0\107\62\271\0\71\62\7\0\37\62\161\0\36\62"+
    "\22\0\60\62\20\0\4\62\37\0\25\62\5\0\23\62"+
    "\260\0\100\62\200\0\113\62\5\0\1\62\102\0\15\62"+
    "\100\0\2\62\1\0\1\62\34\0\370\62\10\0\363\62"+
    "\15\0\37\62\61\0\3\62\21\0\4\62\10\0\u018c\62"+
    "\4\0\153\62\5\0\15\62\3\0\11\62\7\0\12\62"+
    "\146\0\125\62\1\0\107\62\1\0\2\62\2\0\1\62"+
    "\2\0\2\62\2\0\4\62\1\0\14\62\1\0\1\62"+
    "\1\0\7\62\1\0\101\62\1\0\4\62\2\0\10\62"+
    "\1\0\7\62\1\0\34\62\1\0\4\62\1\0\5\62"+
    "\1\0\1\62\3\0\7\62\1\0\u0154\62\2\0\31\62"+
    "\1\0\31\62\1\0\37\62\1\0\31\62\1\0\37\62"+
    "\1\0\31\62\1\0\37\62\1\0\31\62\1\0\37\62"+
    "\1\0\31\62\1\0\10\62\64\0\55\62\12\0\7\62"+
    "\20\0\1\62\u0171\0\54\62\24\0\305\62\73\0\104\62"+
    "\7\0\1\62\264\0\4\62\1\0\33\62\1\0\2\62"+
    "\1\0\1\62\2\0\1\62\1\0\12\62\1\0\4\62"+
    "\1\0\1\62\1\0\1\62\6\0\1\62\4\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\2\62"+
    "\1\0\1\62\2\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\2\62\1\0\1\62"+
    "\2\0\4\62\1\0\7\62\1\0\4\62\1\0\4\62"+
    "\1\0\1\62\1\0\12\62\1\0\21\62\5\0\3\62"+
    "\1\0\5\62\1\0\21\62\104\0\327\62\51\0\65\62"+
    "\13\0\336\62\2\0\u0182\62\16\0\u0131\62\37\0\36\62"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\5\32\1\33\1\1\1\34"+
    "\1\35\1\36\1\0\1\37\1\0\1\40\1\41\1\42"+
    "\2\0\1\43\1\44\1\45\1\46\1\32\1\47\1\50"+
    "\3\32\1\51\1\52\1\0\1\53\1\54\3\32\1\0"+
    "\1\55\5\32\1\53\5\32\1\56\1\57\1\32\1\60"+
    "\11\32\1\61\1\32\1\62\1\32\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\64\0\u0104"+
    "\0\u0138\0\64\0\64\0\64\0\64\0\64\0\64\0\u016c"+
    "\0\u01a0\0\64\0\u01d4\0\u0208\0\u023c\0\u0270\0\64\0\64"+
    "\0\u02a4\0\64\0\64\0\64\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\64\0\u03dc\0\64\0\64\0\64\0\320\0\64"+
    "\0\u0410\0\64\0\64\0\u0444\0\u0478\0\u04ac\0\64\0\64"+
    "\0\64\0\64\0\u04e0\0\u02d8\0\u02d8\0\u0514\0\u0548\0\u057c"+
    "\0\64\0\64\0\u05b0\0\u04ac\0\u02d8\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\u02d8\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u05b0"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u02d8\0\u02d8\0\u08bc"+
    "\0\u02d8\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28"+
    "\0\u0a5c\0\u0a90\0\u02d8\0\u0ac4\0\u02d8\0\u0af8\0\u02d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\2\5\35\1\36\1\35"+
    "\1\37\4\35\1\40\2\35\1\41\1\42\1\43\1\44"+
    "\1\35\1\45\65\0\3\3\105\0\1\46\36\0\5\47"+
    "\1\50\25\47\1\51\30\47\10\0\1\52\64\0\1\53"+
    "\72\0\1\54\57\0\1\55\4\0\1\56\65\0\1\57"+
    "\65\0\1\60\63\0\1\61\63\0\1\62\60\0\1\31"+
    "\6\0\1\31\4\0\21\31\27\0\1\35\6\0\1\35"+
    "\4\0\21\35\27\0\1\35\6\0\1\35\4\0\13\35"+
    "\1\63\5\35\27\0\1\35\6\0\1\35\4\0\6\35"+
    "\1\64\3\35\1\65\6\35\27\0\1\35\6\0\1\35"+
    "\4\0\11\35\1\66\4\35\1\67\2\35\27\0\1\35"+
    "\6\0\1\35\4\0\13\35\1\70\5\35\65\0\1\71"+
    "\3\0\2\47\2\0\57\47\21\0\1\72\43\0\64\73"+
    "\2\74\1\0\61\74\22\0\1\35\6\0\1\35\4\0"+
    "\14\35\1\75\4\35\27\0\1\35\6\0\1\35\4\0"+
    "\13\35\1\76\5\35\27\0\1\35\6\0\1\35\4\0"+
    "\14\35\1\77\4\35\27\0\1\35\6\0\1\35\4\0"+
    "\1\100\20\35\5\0\14\73\1\101\47\73\22\0\1\35"+
    "\6\0\1\35\4\0\16\35\1\102\2\35\27\0\1\35"+
    "\6\0\1\35\4\0\10\35\1\103\10\35\27\0\1\35"+
    "\6\0\1\35\4\0\1\35\1\104\1\105\12\35\1\106"+
    "\1\107\2\35\5\0\14\73\1\101\4\73\1\110\42\73"+
    "\22\0\1\35\6\0\1\35\4\0\12\35\1\111\6\35"+
    "\27\0\1\35\6\0\1\35\4\0\4\35\1\112\14\35"+
    "\27\0\1\35\6\0\1\35\4\0\13\35\1\113\5\35"+
    "\27\0\1\35\6\0\1\35\4\0\17\35\1\114\1\35"+
    "\27\0\1\35\6\0\1\35\4\0\5\35\1\115\13\35"+
    "\27\0\1\35\6\0\1\35\4\0\7\35\1\116\11\35"+
    "\27\0\1\35\6\0\1\35\4\0\4\35\1\117\14\35"+
    "\27\0\1\35\6\0\1\35\4\0\13\35\1\120\5\35"+
    "\27\0\1\35\6\0\1\35\4\0\2\35\1\121\16\35"+
    "\27\0\1\35\6\0\1\35\4\0\14\35\1\122\4\35"+
    "\27\0\1\35\6\0\1\35\4\0\11\35\1\123\7\35"+
    "\27\0\1\35\6\0\1\35\4\0\12\35\1\124\6\35"+
    "\27\0\1\35\6\0\1\35\4\0\1\125\20\35\27\0"+
    "\1\35\6\0\1\35\4\0\1\126\20\35\27\0\1\35"+
    "\6\0\1\35\4\0\1\35\1\127\11\35\1\130\5\35"+
    "\27\0\1\35\6\0\1\35\4\0\5\35\1\131\13\35"+
    "\27\0\1\35\6\0\1\35\4\0\12\35\1\132\6\35"+
    "\27\0\1\35\6\0\1\35\4\0\14\35\1\133\4\35"+
    "\27\0\1\35\6\0\1\35\4\0\11\35\1\134\7\35"+
    "\27\0\1\35\6\0\1\35\4\0\4\35\1\135\14\35"+
    "\27\0\1\35\6\0\1\35\4\0\15\35\1\136\3\35"+
    "\27\0\1\35\6\0\1\35\4\0\5\35\1\137\13\35"+
    "\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2860];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\2\1\6\11\2\1\1\11"+
    "\4\1\2\11\1\1\3\11\5\1\1\11\1\1\3\11"+
    "\1\0\1\11\1\0\2\11\1\1\2\0\4\11\6\1"+
    "\2\11\1\0\5\1\1\0\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[95];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public PaxLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PaxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ANY;
            }
          // fall through
          case 52: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 53: break;
          case 3:
            { return XO_BOOL_NOT;
            }
          // fall through
          case 54: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 55: break;
          case 5:
            { return XO_DOLLAR;
            }
          // fall through
          case 56: break;
          case 6:
            { return XO_PERCENT;
            }
          // fall through
          case 57: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 58: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 59: break;
          case 9:
            { return XO_MUL;
            }
          // fall through
          case 60: break;
          case 10:
            { return XOADD;
            }
          // fall through
          case 61: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 62: break;
          case 12:
            { return XO_NEG;
            }
          // fall through
          case 63: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 64: break;
          case 14:
            { return XO_DIV;
            }
          // fall through
          case 65: break;
          case 15:
            { return ASCIIDIGIT;
            }
          // fall through
          case 66: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 67: break;
          case 17:
            { return XO_REL_LT;
            }
          // fall through
          case 68: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 69: break;
          case 19:
            { return XO_REL_GT;
            }
          // fall through
          case 70: break;
          case 20:
            { return XO_TERN_THEN;
            }
          // fall through
          case 71: break;
          case 21:
            { return AT;
            }
          // fall through
          case 72: break;
          case 22:
            { return PASCALIDENTIFIER;
            }
          // fall through
          case 73: break;
          case 23:
            { return LSQUARE;
            }
          // fall through
          case 74: break;
          case 24:
            { return RSQUARE;
            }
          // fall through
          case 75: break;
          case 25:
            { return XO_EXP;
            }
          // fall through
          case 76: break;
          case 26:
            { return IDENTIFIER;
            }
          // fall through
          case 77: break;
          case 27:
            { return LCURLY;
            }
          // fall through
          case 78: break;
          case 28:
            { return RCURLY;
            }
          // fall through
          case 79: break;
          case 29:
            { return BAD_CHARACTER;
            }
          // fall through
          case 80: break;
          case 30:
            { return XO_REL_NEQ;
            }
          // fall through
          case 81: break;
          case 31:
            { return STRINGLIT;
            }
          // fall through
          case 82: break;
          case 32:
            { return XO_MOD;
            }
          // fall through
          case 83: break;
          case 33:
            { return XOBOOL_AND;
            }
          // fall through
          case 84: break;
          case 34:
            { return XO_RANGE_EXCLUSIVE;
            }
          // fall through
          case 85: break;
          case 35:
            { return SUBCLASS;
            }
          // fall through
          case 86: break;
          case 36:
            { return XO_REL_LTE;
            }
          // fall through
          case 87: break;
          case 37:
            { return XO_REL_EQ;
            }
          // fall through
          case 88: break;
          case 38:
            { return XO_REL_GTE;
            }
          // fall through
          case 89: break;
          case 39:
            { return IF_KEYWORD;
            }
          // fall through
          case 90: break;
          case 40:
            { return IN_KEYWORD;
            }
          // fall through
          case 91: break;
          case 41:
            { return XOBOOL_OR;
            }
          // fall through
          case 92: break;
          case 42:
            { return XO_RANGE_INCLUSIVE;
            }
          // fall through
          case 93: break;
          case 43:
            { return COMMENT;
            }
          // fall through
          case 94: break;
          case 44:
            { return FOR_KEYWORD;
            }
          // fall through
          case 95: break;
          case 45:
            { return SLOT_KEYWORD;
            }
          // fall through
          case 96: break;
          case 46:
            { return STRING;
            }
          // fall through
          case 97: break;
          case 47:
            { return XO_ADD;
            }
          // fall through
          case 98: break;
          case 48:
            { return XO_SUB;
            }
          // fall through
          case 99: break;
          case 49:
            { return XO_BOOL_OR;
            }
          // fall through
          case 100: break;
          case 50:
            { return XO_BOOL_AND;
            }
          // fall through
          case 101: break;
          case 51:
            { return XO_TERN_ELSE;
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
